"use client";
import * as React from "react";

function cn(...c: Array<string | false | null | undefined>) {
    return c.filter(Boolean).join(" ");
}

export type InputProps = Omit<
    React.InputHTMLAttributes<HTMLInputElement>,
    "size"
> & {
    label?: string;
    helperText?: string;
    error?: string;
    leftIcon?: React.ReactNode;
    rightIcon?: React.ReactNode;
    fullWidth?: boolean;
};

export const Input = React.forwardRef<HTMLInputElement, InputProps>(
    (
        {
            id,
            label,
            helperText,
            error,
            leftIcon,
            rightIcon,
            className,
            fullWidth,
            required,
            disabled,
            ...props
        },
        ref
    ) => {
        // Fallback acessível quando id não é fornecido
        const autogeneratedId = React.useId();
        const inputId = id ?? `input-${autogeneratedId}`;

        const helpId = helperText ? `${inputId}-help` : undefined;
        const errorId = error ? `${inputId}-error` : undefined;

        const base =
            "peer rounded-lg border bg-appBg/60 text-textApp placeholder:text-textApp/50 " +
            "px-3 py-2 w-full outline-none transition " +
            "focus-visible:ring-2 focus-visible:ring-white " +
            "focus-visible:ring-offset-2 focus-visible:ring-offset-[color:var(--color-appBg)]";
        const borderOk = "border-obsidianGray/60 focus-visible:border-polarWhite/30";
        const borderErr =
            "border-red-500/70 focus-visible:ring-red-200 focus-visible:ring-offset-[color:var(--color-appBg)]";
        const disabledCls = "disabled:opacity-60 disabled:cursor-not-allowed";

        return (
            <div className={cn("w-full", fullWidth && "w-full")}>
                {label && (
                    <label
                        htmlFor={inputId}
                        className="mb-1 block text-sm font-medium text-textApp/90"
                    >
                        {label}
                        {required && <span className="ml-1 text-phoenixGold">*</span>}
                    </label>
                )}

                <div
                    className={cn(
                        "relative flex items-center",
                        disabled && "opacity-80 cursor-not-allowed"
                    )}
                >
                    {leftIcon && (
                        <span
                            aria-hidden
                            className="pointer-events-none absolute left-3 inline-flex items-center justify-center text-textApp/70"
                        >
                            {leftIcon}
                        </span>
                    )}

                    <input
                        id={inputId}
                        ref={ref}
                        aria-invalid={!!error}
                        aria-describedby={error ? errorId : helpId}
                        className={cn(
                            base,
                            error ? borderErr : borderOk,
                            disabledCls,
                            leftIcon ? "pl-10" : undefined,
                            rightIcon ? "pr-10" : undefined,
                            className
                        )}
                        disabled={disabled}
                        required={required}
                        {...props}
                    />

                    {rightIcon && (
                        <span
                            aria-hidden
                            className="absolute right-3 inline-flex items-center justify-center text-textApp/70"
                        >
                            {rightIcon}
                        </span>
                    )}
                </div>

                {/* mensagens */}
                {error ? (
                    <p id={errorId} className="mt-1 text-xs text-red-400" aria-live="polite">
                        {error}
                    </p>
                ) : helperText ? (
                    <p id={helpId} className="mt-1 text-xs text-textApp/60">
                        {helperText}
                    </p>
                ) : null}
            </div>
        );
    }
);
Input.displayName = "Input";
